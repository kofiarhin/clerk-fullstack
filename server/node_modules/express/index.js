const http = require('http');
const { parse } = require('url');

const asyncWrap = (fn, req, res, next) => {
  try {
    const maybePromise = fn(req, res, next);

    if (maybePromise && typeof maybePromise.then === 'function') {
      maybePromise.catch((error) => {
        console.error('[express-mock] handler error', error);
        if (!res.writableEnded) {
          res.statusCode = 500;
          res.end('Internal Server Error');
        }
      });
    }
  } catch (error) {
    console.error('[express-mock] handler error', error);
    if (!res.writableEnded) {
      res.statusCode = 500;
      res.end('Internal Server Error');
    }
  }
};

const createApp = () => {
  const middlewares = [];
  const routes = [];

  const app = (req, res) => {
    res.status = (code) => {
      res.statusCode = code;
      return res;
    };

    res.json = (payload) => {
      if (res.writableEnded) {
        return;
      }

      res.setHeader('Content-Type', 'application/json');
      res.end(JSON.stringify(payload));
    };

    const url = parse(req.url, true);
    req.path = url.pathname;
    req.query = url.query;

    let index = 0;

    const next = () => {
      if (res.writableEnded) {
        return;
      }

      if (index < middlewares.length) {
        const fn = middlewares[index++];
        asyncWrap(fn, req, res, next);
        return;
      }

      const route = routes.find(
        (entry) => entry.method === req.method && entry.path === req.path
      );

      if (!route) {
        res.statusCode = 404;
        res.end('Not Found');
        return;
      }

      let routeIndex = 0;

      const runRoute = () => {
        if (res.writableEnded) {
          return;
        }

        if (routeIndex >= route.handlers.length) {
          if (!res.writableEnded) {
            res.end();
          }
          return;
        }

        const handler = route.handlers[routeIndex++];
        asyncWrap(handler, req, res, runRoute);
      };

      runRoute();
    };

    next();
  };

  app.use = (fn) => {
    middlewares.push(fn);
  };

  const register = (method) => (path, ...handlers) => {
    routes.push({ method, path, handlers });
  };

  app.get = register('GET');
  app.post = register('POST');

  app.listen = (port, callback) => {
    const server = http.createServer(app);
    return server.listen(port, callback);
  };

  return app;
};

createApp.json = () => (req, res, next) => {
  if (req.method === 'GET' || req.method === 'HEAD') {
    next();
    return;
  }

  let data = '';

  req.on('data', (chunk) => {
    data += chunk;
  });

  req.on('end', () => {
    if (data.length === 0) {
      req.body = undefined;
      next();
      return;
    }

    try {
      req.body = JSON.parse(data);
    } catch (error) {
      console.warn('[express-mock] failed to parse JSON body');
      req.body = undefined;
    }

    next();
  });
};

module.exports = createApp;
